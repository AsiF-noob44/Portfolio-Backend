====================================
PORTFOLIO BACKEND API DOCUMENTATION
====================================

Base URL: http://localhost:5000/api/v1

====================================
AUTHENTICATION ENDPOINTS
====================================

------------------------------------
1. REGISTER USER
------------------------------------
Method: POST
URL: http://localhost:5000/api/v1/users/register

Description: Registers a new user account

Request Body (JSON):
{
  "username": "johndoe",
  "email": "john@example.com",
  "password": "password123"
}

Required Fields:
- username (required, unique, trimmed)
- email (required, unique, valid email format, lowercase)
- password (required, min 6 characters)

Response (201 Created):
{
  "message": "User registered successfully",
  "user": {
    "_id": "507f1f77bcf86cd799439011",
    "username": "johndoe",
    "email": "john@example.com",
    "createdAt": "2025-10-29T12:00:00.000Z",
    "updatedAt": "2025-10-29T12:00:00.000Z"
  }
}

Error Responses:
- 400: Invalid email format, validation errors
- 409: User with this email/username already exists
- 500: Server error

------------------------------------
2. LOGIN USER
------------------------------------
Method: POST
URL: http://localhost:5000/api/v1/users/login

Description: Authenticates user and returns JWT token

Request Body (JSON):
{
  "email": "john@example.com",
  "password": "password123"
}

Required Fields:
- email (required)
- password (required)

Response (200 OK):
{
  "success": true,
  "message": "Login successful",
  "user": {
    "_id": "507f1f77bcf86cd799439011",
    "username": "johndoe",
    "email": "john@example.com"
  },
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}

Note: JWT token is also set as HTTP-only cookie named "user-token"

Cookie Details:
- Name: user-token
- httpOnly: true
- secure: true
- sameSite: Strict
- Expires: 7 days (default)

Error Responses:
- 404: User not found
- 401: Invalid credentials
- 500: Server error

====================================
BLOG ENDPOINTS
====================================

Note: Creating, updating, and deleting blogs requires authentication.
Reading blogs is public (no authentication required).

------------------------------------
3. CREATE A NEW BLOG (Protected)
------------------------------------
Method: POST
URL: http://localhost:5000/api/v1/blogs

Description: Creates a new blog post (requires authentication)

Authentication Required: YES
Headers:
Authorization: Bearer <your-jwt-token>
OR Cookie: user-token=<your-jwt-token>

Request Body (JSON):
{
  "title": "Your Blog Title",
  "img": "https://example.com/image.jpg",
  "category": "tech",
  "description": "Full blog description",
  "short_description": "Brief summary"
}

Required Fields:
- title (min 5 chars, max 200 chars)
- description

Response (201 Created):
{
  "message": "Blog created successfully",
  "blog": { ... blog object ... }
}

Error Responses:
- 401: Unauthorized access - Please login
- 400: Validation errors
- 409: Blog with same title already exists
- 500: Server error

------------------------------------
4. GET ALL BLOGS (Public)
------------------------------------
Method: GET
URL: http://localhost:5000/api/v1/blogs

Description: Retrieves all blogs with pagination and filtering

Authentication Required: NO

Query Parameters (Optional):
- page: Page number (default: 1)
- limit: Results per page (default: 10)
- category: Filter by category (tech, design, or business)

Examples:
- Get all blogs (page 1): http://localhost:5000/api/v1/blogs
- Get page 2: http://localhost:5000/api/v1/blogs?page=2
- Get tech blogs only: http://localhost:5000/api/v1/blogs?category=tech
- Get design blogs, page 2, 5 per page: http://localhost:5000/api/v1/blogs?category=design&page=2&limit=5

Response (200 OK):
{
  "success": true,
  "totalBlogs": 25,
  "currentPage": 1,
  "totalPages": 3,
  "limit": 10,
  "blogs": [ ... array of blog objects ... ]
}

------------------------------------
5. GET SINGLE BLOG BY ID (Public)
------------------------------------
Method: GET
URL: http://localhost:5000/api/v1/blogs/:id

Description: Retrieves a single blog by ID and increments view count

Authentication Required: NO

Example:
http://localhost:5000/api/v1/blogs/507f1f77bcf86cd799439011

Response (200 OK):
{
  "success": true,
  "blog": { ... blog object with incremented views ... }
}

Note: This endpoint automatically increments the views counter by 1 each time it's called.

Error Responses:
- 400: Invalid blog ID format
- 404: Blog not found
- 500: Server error

------------------------------------
6. UPDATE A BLOG (Protected)
------------------------------------
Method: PUT
URL: http://localhost:5000/api/v1/blogs/:id

Description: Updates an existing blog by ID (requires authentication)

Authentication Required: YES
Headers:
Authorization: Bearer <your-jwt-token>
OR Cookie: user-token=<your-jwt-token>

Example:
http://localhost:5000/api/v1/blogs/507f1f77bcf86cd799439011

Request Body (JSON):
{
  "title": "Updated Title",
  "img": "https://example.com/new-image.jpg",
  "category": "business",
  "description": "Updated description",
  "short_description": "Updated summary"
}

Required Fields:
- title
- description

Response (200 OK):
{
  "success": true,
  "message": "Blog updated successfully",
  "blog": { ... updated blog object ... }
}

Error Responses:
- 401: Unauthorized access - Please login
- 400: Invalid blog ID format, validation errors
- 404: Blog not found
- 500: Server error

------------------------------------
7. DELETE A BLOG (Protected)
------------------------------------
Method: DELETE
URL: http://localhost:5000/api/v1/blogs/:id

Description: Deletes a blog by ID (requires authentication)

Authentication Required: YES
Headers:
Authorization: Bearer <your-jwt-token>
OR Cookie: user-token=<your-jwt-token>

Example:
http://localhost:5000/api/v1/blogs/507f1f77bcf86cd799439011

Response (200 OK):
{
  "success": true,
  "message": "Blog deleted successfully",
  "blog": { ... deleted blog object ... }
}

Error Responses:
- 401: Unauthorized access - Please login
- 400: Invalid blog ID format
- 404: Blog not found
- 500: Server error

====================================
AUTHENTICATION GUIDE
====================================

To access protected endpoints:

Option 1 - Using Authorization Header:
Add to request headers:
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

Option 2 - Using Cookie (automatic after login):
The login endpoint automatically sets a cookie named "user-token"
Subsequent requests will include this cookie automatically

JWT Token Details:
- Payload: { email, id }
- Expiration: 7 days (default)
- Algorithm: HS256

====================================
DATA SCHEMAS
====================================

User Schema:
{
  "_id": "MongoDB ObjectId",
  "username": "String (required, unique, trimmed)",
  "email": "String (required, unique, lowercase, trimmed)",
  "password": "String (hashed with bcrypt, min 6 chars)",
  "createdAt": "Date (auto-generated)",
  "updatedAt": "Date (auto-generated)"
}

Blog Schema:
{
  "_id": "MongoDB ObjectId",
  "title": "String (required, 5-200 chars)",
  "img": "String (default: 'default-image.jpg')",
  "category": "String (tech/design/business, lowercase)",
  "description": "String (required)",
  "short_description": "String (max 150 chars)",
  "views": "Number (default: 0, min: 0, max: 1000000)",
  "createdAt": "Date (auto-generated)",
  "updatedAt": "Date (auto-generated)"
}

====================================
BLOG CATEGORIES
====================================
- tech
- design
- business

Note: Categories are automatically converted to lowercase.

====================================
ERROR RESPONSES
====================================

Authentication Errors:
401 Unauthorized:
- No token provided
- Invalid or expired token
- Invalid credentials

Validation Errors:
400 Bad Request:
- Invalid email format
- Missing required fields
- Invalid blog ID format
- Validation errors

Conflict Errors:
409 Conflict:
- User with email/username already exists
- Blog with title already exists

Not Found Errors:
404 Not Found:
- User not found
- Blog not found

Server Errors:
500 Internal Server Error:
- Database errors
- Server errors

====================================
POSTMAN COLLECTION SUMMARY
====================================

Authentication:
1. Register User    → POST   /api/v1/users/register
2. Login User       → POST   /api/v1/users/login

Blogs (Public):
3. Get All Blogs    → GET    /api/v1/blogs
4. Get Blog by ID   → GET    /api/v1/blogs/:id

Blogs (Protected - Requires Auth):
5. Create Blog      → POST   /api/v1/blogs
6. Update Blog      → PUT    /api/v1/blogs/:id
7. Delete Blog      → DELETE /api/v1/blogs/:id

====================================
QUICK START GUIDE
====================================

1. Register a new user:
   POST /api/v1/users/register
   Body: { "username": "admin", "email": "admin@example.com", "password": "admin123" }

2. Login:
   POST /api/v1/users/login
   Body: { "email": "admin@example.com", "password": "admin123" }
   → Save the returned token

3. Create a blog (use token from step 2):
   POST /api/v1/blogs
   Header: Authorization: Bearer <token>
   Body: { "title": "My First Blog", "description": "Blog content..." }

4. View all blogs (no auth required):
   GET /api/v1/blogs

====================================
END OF DOCUMENTATION
====================================
